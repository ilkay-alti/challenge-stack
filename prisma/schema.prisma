generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  twoFactorConfirmation Boolean @default(false)   
  emailVerified Boolean @default(false)
  role     String   @default("user") 
  initialCapital          Float?     
  currentCapital          Float?     
  transactions            Transaction[]
  challenges              Challenge[]
  achievements            Achievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model TwoFactorToken {
  id            String    @id @default(cuid())
  email          String
  token         String @unique 
  expires     DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id @default(cuid())
  email          String
  token         String @unique 
  expires     DateTime

  @@unique([email, token])
}

model Challenge {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  targetType    String     // "profit", "percentage", "volume"
  targetValue   Float
  startDate     DateTime
  endDate       DateTime
  isCompleted   Boolean    @default(false)
  transactions  Transaction[]
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("challenges")
}

model Transaction {
  id           String           @id @default(uuid())
  type         TransactionType  // LONG, SHORT, BUY, SELL
  assetSymbol  String           // Örnek: "BTC", "ETH"
  quantity     Float            // İşlem yapılan miktar
  entryPrice   Float            // Giriş (alış/satış) fiyatı
  exitPrice    Float?           // Çıkış fiyatı (opsiyonel, işlem kapandıysa)
  capital      Float            // İşlem anındaki kasa değeri
  profit       Float?           // Kar (hesaplandıysa)
  isOpen       Boolean          @default(true) // Açık pozisyon mu?
  notes        String?          // Ek notlar (opsiyonel)
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  challengeId  Int?
  challenge    Challenge?       @relation(fields: [challengeId], references: [id])


  user            User      @relation(fields: [userId], references: [id])

  @@map("transactions")
}
enum TransactionType {
  LONG
  SHORT
  BUY
  SELL
}

model Achievement {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  icon        String
  criteria    Json
  users       User[]
}